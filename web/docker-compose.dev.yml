# docker-compose.dev.yml - THE ABSOLUTELY FINAL VERSION
services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports: ["8080:80"]
    volumes:
      - ./Caddyfile.dev:/etc/caddy/Caddyfile

  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} # This line fixes the problem
    command: npm run dev

  backend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./backend:/app
    command: sh -c "npm install && npx prisma generate && npm run dev"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PROVISIONING_API_KEY=${PROVISIONING_API_KEY}
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy

  db:
    image: timescale/timescaledb:latest-pg16
    restart: unless-stopped
    ports: ["5432:5432"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db_data: