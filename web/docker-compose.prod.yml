# docker-compose.prod.yml - FINAL & CORRECTED VERSION
version: '3.8'

services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports: ["80:80", "443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend

  frontend:
    build:
      context: ./frontend
      # Docker Compose automatically makes variables from .env available for build args
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    expose: [3000]

  backend:
    build: ./backend
    restart: unless-stopped
    expose: [3001]
    # --- THIS IS THE FIX ---
    # We remove `env_file` and use the `environment` block instead.
    # This ensures Docker Compose correctly substitutes the variables from your .env file
    # before passing them to the container.
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PROVISIONING_API_KEY=${PROVISIONING_API_KEY}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: timescale/timescaledb:latest-pg16
    restart: unless-stopped
    # This part is correct. It properly reads from your .env file.
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  caddy_data:
  caddy_config:
  db_data: