# docker-compose.prod.yml - FINAL, PRODUCTION-READY VERSION

services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports: ["80:80", "443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend

  frontend:
    build:
      context: ./frontend
      args:
        # Docker Compose automatically reads .env and makes these variables available for build args
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    expose: [3000]

  backend:
    build:
      context: ./backend
    restart: unless-stopped
    # --- CRITICAL FIX ---
    # This command sequence ensures the Prisma Client is up-to-date with your schema,
    # applies database migrations, and then starts the application.
    command: sh -c "npx prisma generate && npx prisma migrate deploy && node index.js"
    expose: [3001]
    # --- CRITICAL FIX ---
    # Use the `environment` block to correctly substitute variables from your .env file.
    # Do not use `env_file`.
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PROVISIONING_API_KEY=${PROVISIONING_API_KEY}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: timescale/timescaledb:latest-pg16
    restart: unless-stopped
    # This is correct. Docker Compose reads .env and provides these to the container.
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  caddy_data:
  caddy_config:
  db_data: