-negotiable source of truth for the application's architecture, code, and workflows. All previous documentation is obsolete. Adherence to this guide is mandatory to prevent the catastrophic failures of the past.
1. Final Architecture

The architecture is simple and robust. It consists of four Docker services orchestrated by docker-compose.

    caddy: The reverse proxy. It is the only service exposed to the outside world. It handles all incoming traffic on ports 80/443, acquires SSL certificates automatically, and routes requests to the correct internal service.

    frontend: The Next.js application. It is not exposed publicly. It receives traffic only from Caddy.

    backend: The Express.js API. It is not exposed publicly. It receives traffic only from Caddy.

    db: The TimescaleDB/PostgreSQL database. It is not exposed publicly. It receives connections only from the backend.

      
+------------------+
|   The Internet   |
+--------+---------+
         |
 (Ports 80 & 443)
         |
+--------v---------+      +------------------+      +-------------------+
|     caddy        +------>   frontend       |      |      backend      |
| (Reverse Proxy)  |      | (port 3000)      |      |   (port 3001)     |
+------------------+      +------------------+      +---------+---------+
         ^                                                     |
         |                                                     |
         +-----------------------------------------------------+
                                                               |
                                                     +---------v---------+
                                                     |        db         |
                                                     |   (port 5432)     |
                                                     +-------------------+

    

IGNORE_WHEN_COPYING_START
Use code with caution.
IGNORE_WHEN_COPYING_END
2. The One True Setup Workflow

This is the only sanctioned method for setting up a new development or production environment from a clean slate. There are no other methods.
Step 1: Prepare the Environment

    Clone the repository.

    Navigate to the /web directory.

    Ensure the correct versions of docker and docker compose (with a space) are installed. The legacy docker-compose (with a hyphen) is forbidden.

    Create the init.sql file inside a new directory: web/db-init/init.sql. This automates the database setup.

web/db-init/init.sql:

      
-- This script runs automatically when the database container is first created.
-- It enables all necessary extensions and creates the required trigger functions.
CREATE EXTENSION IF NOT EXISTS ltree;
CREATE EXTENSION IF NOT EXISTS timescaledb;

-- This function will be attached via a trigger created by Prisma migrations
-- or a subsequent manual step if needed.
CREATE OR REPLACE FUNCTION update_device_path() RETURNS trigger AS $$
  BEGIN
    IF NEW."parentId" IS NULL THEN
      NEW.path = text2ltree(NEW.id);
    ELSE
      SELECT D.path || text2ltree(NEW.id)
      INTO NEW.path
      FROM "Device" AS D
      WHERE D.id = NEW."parentId";
    END IF;
    RETURN NEW;
  END;
$$ LANGUAGE plpgsql;

    

IGNORE_WHEN_COPYING_START
Use code with caution. SQL
IGNORE_WHEN_COPYING_END
Step 2: Full System Startup & Migration

These three commands, run in order from the /web directory, will bring the entire system online correctly.

    Nuke the old environment (if it exists) to prevent corruption:

          
    sudo docker compose -f docker-compose.prod.yml down --remove-orphans --volumes

        

    IGNORE_WHEN_COPYING_START

Use code with caution. Bash
IGNORE_WHEN_COPYING_END

Build and start all services. The -d flag runs them in the background. The database will automatically run the init.sql script.

      
sudo docker compose -f docker-compose.prod.yml up --build -d

    

IGNORE_WHEN_COPYING_START
Use code with caution. Bash
IGNORE_WHEN_COPYING_END

Run the database migration. This command connects to the running backend container and instructs Prisma to create all the necessary tables.

      
sudo docker compose -f docker-compose.prod.yml exec backend npx prisma migrate deploy

    

IGNORE_WHEN_COPYING_START

    Use code with caution. Bash
    IGNORE_WHEN_COPYING_END

The system is now live and fully functional.
3. Final Configuration Files

These are the canonical versions of all critical configuration files. They are not to be modified without updating this bible.
docker-compose.prod.yml

      
# The one true production compose file.
version: '3.8'

services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports: ["80:80", "443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    env_file: ./.env

  frontend:
    build:
      context: ./frontend
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    expose: [3000]

  backend:
    build: ./backend
    restart: unless-stopped
    expose: [3001]
    env_file: ./.env
    depends_on:
      db:
        condition: service_healthy

  db:
    image: timescale/timescaledb:latest-pg16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      # This line automates the database setup.
      - ./db-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  caddy_data:
  caddy_config:
  db_data:

    

IGNORE_WHEN_COPYING_START
Use code with caution. Yaml
IGNORE_WHEN_COPYING_END
.env

      
# The single source of truth for all environment variables.

# --- DOMAIN CONFIG (FOR CADDY) ---
DOMAIN_NAME=intelvis.ai

# --- DATABASE CREDENTIALS (FOR DB CONTAINER) ---
POSTGRES_USER=user
POSTGRES_PASSWORD=password
POSTGRES_DB=mydb

# --- BACKEND SECRETS (FOR BACKEND CONTAINER) ---
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
JWT_SECRET=a-very-strong-and-secret-key-that-you-should-change
PROVISIONING_API_KEY=another-very-strong-secret-key

# --- FRONTEND CONFIG (FOR FRONTEND CONTAINER AT BUILD TIME) ---
NEXT_PUBLIC_API_URL=https://api.intelvis.ai

    

IGNORE_WHEN_COPYING_START
Use code with caution. Env
IGNORE_WHEN_COPYING_END
Caddyfile

      
# This file routes traffic to the correct containers.
# It uses the staging server to avoid rate limits during development.

{
    # This global block tells Caddy to use the Let's Encrypt staging server.
    # It prevents rate-limiting errors. Browsers will show a certificate warning,
    # which is expected. Click "Accept Risk and Continue".
    #
    # TO GO LIVE: Comment out or delete this entire block and restart Caddy.
    acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
}

# Route the main domain to the frontend.
{$DOMAIN_NAME} {
    reverse_proxy frontend:3000
}

# Route the API subdomain to the backend.
api.{$DOMAIN_NAME} {
    reverse_proxy backend:3001
}

    

IGNORE_WHEN_COPYING_START
Use code with caution. Caddy
IGNORE_WHEN_COPYING_END
4. Final Critical Code

The following code files contain critical fixes that resolved major application bugs.
frontend/context/AuthContext.tsx

This version uses window.location.replace to perform a hard redirect, which is the only correct way to break the authentication race condition.

      
"use client"

import {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
} from "react"

interface User {
  id: string
  email: string
}

interface AuthContextType {
  user: User | null
  isLoading: boolean
  isAuthCheckComplete: boolean
  login: (email: string, password: string) => Promise<void>
  logout: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

const API_URL = process.env.NEXT_PUBLIC_API_URL;

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [isAuthCheckComplete, setIsAuthCheckComplete] = useState(false)

  useEffect(() => {
    const checkSession = async () => {
      try {
        const res = await fetch(`${API_URL}/api/auth/me`, {
          credentials: "include",
        })
        if (res.ok) {
          setUser(await res.json())
        } else {
          setUser(null)
        }
      } catch {
        setUser(null)
      } finally {
        setIsAuthCheckComplete(true)
      }
    }
    checkSession()
  }, [])

  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const res = await fetch(`${API_URL}/api/auth/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Invalid credentials");
      }
      
      // THE FIX: A hard redirect breaks the frontend race condition.
      window.location.replace("/dashboard");

    } finally {
      // This is only hit on failure, as success causes a page reload.
      setIsLoading(false);
    }
  };

  const logout = async () => {
    setIsLoading(true);
    try {
      await fetch(`${API_URL}/api/auth/logout`, {
        method: "POST",
        credentials: "include",
      });
    } finally {
      setUser(null);
      setIsLoading(false);
      window.location.replace("/login");
    }
  };

  return (
    <AuthContext.Provider
      value={{ user, isLoading, isAuthCheckComplete, login, logout }}
    >
      {/* Do not render children until the initial auth check is complete. */}
      {isAuthCheckComplete ? children : null }
    </AuthContext.Provider>
  )
}

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}

    

IGNORE_WHEN_COPYING_START
Use code with caution. Tsx
IGNORE_WHEN_COPYING_END
frontend/app/login/page.tsx

This version is simplified to only call the context and correctly handles errors in a type-safe manner to pass strict linting rules.

      
"use client"

import { useState } from "react"
import Link from "next/link"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"
import { Loader2 } from "lucide-react"
import { toast } from "sonner"
import { useAuth } from "@/context/AuthContext"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"

const formSchema = z.object({
  email: z.string().email({ message: "Enter a valid email." }),
  password: z.string().min(8, { message: "Password ≥ 8 characters." }),
})

export default function LoginPage() {
  const { login } = useAuth()
  const [isLoading, setIsLoading] = useState(false)

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { email: "", password: "" },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    try {
      await login(values.email, values.password);
    } catch (error) {
      // THE FIX: Type-safe error handling for strict linters.
      let errorMessage = "An unknown login error occurred.";
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      toast.error(errorMessage);
      setIsLoading(false);
    }
  }

  return (
    <div className="flex min-h-screen items-center justify-center bg-background p-4">
      <Card className="w-full max-w-sm shadow-lg">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl">Log in</CardTitle>
          <CardDescription>Enter your credentials.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input
                        type="email"
                        placeholder="name@example.com"
                        autoComplete="email"
                        disabled={isLoading}
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input
                        type="password"
                        placeholder="••••••••"
                        autoComplete="current-password"
                        disabled={isLoading}
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button
                type="submit"
                className="w-full"
                disabled={isLoading || !form.formState.isValid}
              >
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Log in
              </Button>
            </form>
          </Form>
          <div className="mt-4 text-center text-sm">
            Need an account?{" "}
            <Link
              href="/register"
              className="font-medium text-primary underline-offset-4 hover:underline"
            >
              Sign up
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

    

IGNORE_WHEN_COPYING_START
Use code with caution. Tsx
IGNORE_WHEN_COPYING_END
5. Summary of Problems Solved (The "Wall of Shame")

This project was plagued by a cascading series of failures. Each was solved in turn:

    Docker Tooling: The server was running an ancient, buggy version of docker-compose (1.x). This caused 'ContainerConfig' errors. Solution: Upgraded to the modern docker compose plugin.

    Firewall: The server's ufw firewall was blocking all web traffic on ports 80/443. Solution: Added rules to allow traffic on those ports.

    Database Initialization: The database container was starting without the required password and was not being migrated. Solution: Corrected the .env variables and implemented a strict, multi-step startup and migration workflow.

    Certificate/SSL Errors: Caddy was being rate-limited by Let's Encrypt after too many failed attempts, causing SSL_ERROR_INTERNAL_ERROR_ALERT. Solution: Switched to the Let's Encrypt staging server in the Caddyfile for development.

    Authentication Race Condition: The frontend (router.replace) was navigating to protected pages faster than the browser could process the login cookie, causing immediate unauthorized errors. Solution: Replaced the soft navigation with a hard window.location.replace in the AuthContext to force a page reload, breaking the race condition.

    Linting/Build Errors: Strict TypeScript rules blocked the build due to unsafe error handling. Solution: Implemented type-safe instanceof Error checks in catch blocks.

    Configuration Drift: The primary underlying problem was a lack of a single source of truth, with conflicting docker-compose and .env files. Solution: This document.